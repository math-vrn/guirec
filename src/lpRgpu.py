# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lpRgpu', [dirname(__file__)])
        except ImportError:
            import _lpRgpu
            return _lpRgpu
        if fp is not None:
            try:
                _mod = imp.load_module('_lpRgpu', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lpRgpu = swig_import_helper()
    del swig_import_helper
else:
    import _lpRgpu
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class lpRgpu(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lpRgpu, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lpRgpu, name)
    __repr__ = _swig_repr

    def __init__(self, file_glparams):
        this = _lpRgpu.new_lpRgpu(file_glparams)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _lpRgpu.delete_lpRgpu
    __del__ = lambda self: None

    def printGlobalParameters(self):
        return _lpRgpu.lpRgpu_printGlobalParameters(self)

    def printFwdParameters(self):
        return _lpRgpu.lpRgpu_printFwdParameters(self)

    def printAdjParameters(self):
        return _lpRgpu.lpRgpu_printAdjParameters(self)

    def readGlobalParameters(self, file_params):
        return _lpRgpu.lpRgpu_readGlobalParameters(self, file_params)

    def readFwdParameters(self, file_params):
        return _lpRgpu.lpRgpu_readFwdParameters(self, file_params)

    def readAdjParameters(self, file_params):
        return _lpRgpu.lpRgpu_readAdjParameters(self, file_params)

    def printCurrentGPUMemory(self, str=None):
        return _lpRgpu.lpRgpu_printCurrentGPUMemory(self, str)

    def initFwd(self, params):
        return _lpRgpu.lpRgpu_initFwd(self, params)

    def initAdj(self, params):
        return _lpRgpu.lpRgpu_initAdj(self, params)

    def deleteFwd(self):
        return _lpRgpu.lpRgpu_deleteFwd(self)

    def deleteAdj(self):
        return _lpRgpu.lpRgpu_deleteAdj(self)

    def prefilter2D(self, df, dtmpf, width, height):
        return _lpRgpu.lpRgpu_prefilter2D(self, df, dtmpf, width, height)

    def execFwd(self):
        return _lpRgpu.lpRgpu_execFwd(self)

    def execAdj(self):
        return _lpRgpu.lpRgpu_execAdj(self)

    def execFwdMany(self, R, f):
        return _lpRgpu.lpRgpu_execFwdMany(self, R, f)

    def execAdjMany(self, f, R, cor):
        return _lpRgpu.lpRgpu_execAdjMany(self, f, R, cor)

    def applyFilter(self):
        return _lpRgpu.lpRgpu_applyFilter(self)

    def padding(self, Ns_, shift):
        return _lpRgpu.lpRgpu_padding(self, Ns_, shift)
lpRgpu_swigregister = _lpRgpu.lpRgpu_swigregister
lpRgpu_swigregister(lpRgpu)

# This file is compatible with both classic and new-style classes.


